# Byte-compiled / optimized / DLL files
__pycache__/
*.py[codz]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py.cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock
#poetry.toml

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#   pdm recommends including project-wide configuration in pdm.toml, but excluding .pdm-python.
#   https://pdm-project.org/en/latest/usage/project/#working-with-version-control
#pdm.lock
#pdm.toml
.pdm-python
.pdm-build/

# pixi
#   Similar to Pipfile.lock, it is generally recommended to include pixi.lock in version control.
#pixi.lock
#   Pixi creates a virtual environment in the .pixi directory, just like venv module creates one
#   in the .venv directory. It is recommended not to include this directory in version control.
.pixi

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.envrc
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# Abstra
# Abstra is an AI-powered process automation framework.
# Ignore directories containing user credentials, local state, and settings.
# Learn more at https://abstra.io/docs
.abstra/

# Visual Studio Code
#  Visual Studio Code specific template is maintained in a separate VisualStudioCode.gitignore
#  that can be found at https://github.com/github/gitignore/blob/main/Global/VisualStudioCode.gitignore
#  and can be added to the global gitignore or merged into this file. However, if you prefer,
#  you could uncomment the following to ignore the entire vscode folder
# .vscode/

# Ruff stuff:
.ruff_cache/

# PyPI configuration file
.pypirc

# Cursor
#  Cursor is an AI-powered code editor. `.cursorignore` specifies files/directories to
#  exclude from AI features like autocomplete and code analysis. Recommended for sensitive data
#  refer to https://docs.cursor.com/context/ignore-files
.cursorignore
.cursorindexingignore

# Marimo
marimo/_static/
marimo/_lsp/
__marimo__/
.DS_Store
engines/vision_swift/.build/

# Project-specific ignores

# Processing runs - keep them out of repo except specified ones
/full_dataset_processing/run_*/
!/full_dataset_processing/run_20250930_181456/

# Temporary test/experiment directories
/test_ocr_run/
/test-results/
/aafc_full_dataset/

# macOS duplicate files (Finder creates these)
* 2.*
* 2

# Temporary markdown files
*-temp.md
*-draft.md
*-scratch.md

# Experiment and test artifacts
test_*/
*_test/
*_FAILED/
validation_metrics.json

# Environment backups (secrets)
.env copy
*.env.bak

# Temporary processing runs (regenerable from batch IDs)
full_dataset_processing/gpt4omini_aafc_free/

# === Repository Cleanup (2025-10-09) ===
# Research and experimental artifacts - keep code clean

# All experimental processing directories (except published datasets)
/full_dataset_processing/*
!/full_dataset_processing/README.md
!/full_dataset_processing/.gitkeep
!/full_dataset_processing/published/

# Batch processing temporary files
batch_history.jsonl
batch_monitor_history.jsonl
batch_output.jsonl
coordination-status-*.json

# OpenRouter test and production directories
openrouter_test_*/
openrouter_full_*/

# Example code - keep provenance examples, exclude rest
examples/AAFC-SRDC/
examples/schema_mapping_demo.py
examples/.DS_Store

# Temporary coordination files
*.coordination.json
*-status.json
/archive/
.claude/settings.local.json

# === DATA SEPARATION (Added 2025-10-22) ===
# Keep data files out of git to prevent repository bloat

# Extraction data files
*.jsonl
!published/**/metadata.json
!published/**/CITATION.cff
!docs/data/**/*.jsonl

# Database files
*.db
*.sqlite
*.sqlite3
specimen_index.db

# Large archives
archives/
backups/
*.tar.gz
*.zip
*.7z
!docs/data/**/*.zip

# Backup files
*_backup/
*.bak
checksums_*.txt

# Data directories (keep only metadata)
full_dataset_processing/*/raw.jsonl
full_dataset_processing/*/app.db
full_dataset_processing/*/events.jsonl
full_dataset_processing/*/*.db

# Exception: Keep small metadata files in published/
!published/**/README.md
!published/**/metadata.json
!published/**/DATA_DOI.txt

# Session planning (temporary working files - not for version control)
TOMORROW_SESSION_PLAN.md
*SESSION_PLAN.md
*.STALE

# Deliverables - Data Governance (added 2025-10-24)
# Commit: Documentation and metadata
# Ignore: Large data files (occurrence.csv, raw extractions)
deliverables/**/occurrence.csv
deliverables/**/raw/
deliverables/**/*.zip
!deliverables/**/README.md
!deliverables/**/QUALITY_WARNING.md
!deliverables/**/quality_report.json
!deliverables/**/extraction_metadata.json

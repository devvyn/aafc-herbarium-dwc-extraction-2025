{
  "demonstration_info": {
    "created_at": "2025-09-25T21:18:27.377117",
    "sample_size": 50,
    "output_directory": "stakeholder_demo",
    "purpose": "Stakeholder demonstration of herbarium OCR capabilities"
  },
  "steps": {
    "1_sample_creation": {
      "success": true,
      "processing_time": 1.444044828414917,
      "stdout": "\ud83d\udcc1 Processing readable category (target: 40 images)\n  \ud83d\udce5 Downloading 000e426d6ed12c347a937c47f568088a8daa32cdea3127d90f1eca5653831c84.jpg...\nFailed to download https://devvyn.aafc-srdc.herbarium.s3.us-east-1.amazonaws.com/images/00/0e/000e426d6ed12c347a937c47f568088a8daa32cdea3127d90f1eca5653831c84.jpg: HTTPSConnectionPool(host='devvyn.aafc-srdc.herbarium.s3.us-east-1.amazonaws.com', port=443): Max retries exceeded with url: /images/00/0e/000e426d6ed12c347a937c47f568088a8daa32cdea3127d90f1eca5653831c84.jpg (Caused by SSLError(SSLCertVerificationError(1, \"[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: Hostname mismatch, certificate is not valid for 'devvyn.aafc-srdc.herbarium.s3.us-east-1.amazonaws.com'. (_ssl.c:1016)\")))\n  \u274c Failed to download 000e426d6ed12c347a937c47f568088a8daa32cdea3127d90f1eca5653831c84.jpg\n  \ud83d\udce5 Downloading 002143863d4b7c143fbf210738ff3f6a01a0f0d421e93e2762e3ee3e4c5c3fdd.jpg...\nFailed to download https://devvyn.aafc-srdc.herbarium.s3.us-east-1.amazonaws.com/images/00/21/002143863d4b7c143fbf210738ff3f6a01a0f0d421e93e2762e3ee3e4c5c3fdd.jpg: HTTPSConnectionPool(host='devvyn.aafc-srdc.herbarium.s3.us-east-1.amazonaws.com', port=443): Max retries exceeded with url: /images/00/21/002143863d4b7c143fbf210738ff3f6a01a0f0d421e93e2762e3ee3e4c5c3fdd.jpg (Caused by SSLError(SSLCertVerificationError(1, \"[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: Hostname mismatch, certificate is not valid for 'devvyn.aafc-srdc.herbarium.s3.us-east-1.amazonaws.com'. (_ssl.c:1016)\")))\n  \u274c Failed to download 002143863d4b7c143fbf210738ff3f6a01a0f0d421e93e2762e3ee3e4c5c3fdd.jpg\n  \ud83d\udce5 Downloading 002e8642edeadc9390dc630b8bd0a0a656e6b2bf76894943df0032b4b3916ee4.jpg...\nFailed to download https://devvyn.aafc-srdc.herbarium.s3.us-east-1.amazonaws.com/images/00/2e/002e8642edeadc9390dc630b8bd0a0a656e6b2bf76894943df0032b4b3916ee4.jpg: HTTPSConnectionPool(host='devvyn.aafc-srdc.herbarium.s3.us-east-1.amazonaws.com', port=443): Max retries exceeded with url: /images/00/2e/002e8642edeadc9390dc630b8bd0a0a656e6b2bf76894943df0032b4b3916ee4.jpg (Caused by SSLError(SSLCertVerificationError(1, \"[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: Hostname mismatch, certificate is not valid for 'devvyn.aafc-srdc.herbarium.s3.us-east-1.amazonaws.com'. (_ssl.c:1016)\")))\n  \u274c Failed to download 002e8642edeadc9390dc630b8bd0a0a656e6b2bf76894943df0032b4b3916ee4.jpg\n  \ud83d\udce5 Downloading 0032c4e7a00e97fcaafa518ceaea0d91919131e12c77c727ad8fb90ef1d30267.jpg...\nFailed to download https://devvyn.aafc-srdc.herbarium.s3.us-east-1.amazonaws.com/images/00/32/0032c4e7a00e97fcaafa518ceaea0d91919131e12c77c727ad8fb90ef1d30267.jpg: HTTPSConnectionPool(host='devvyn.aafc-srdc.herbarium.s3.us-east-1.amazonaws.com', port=443): Max retries exceeded with url: /images/00/32/0032c4e7a00e97fcaafa518ceaea0d91919131e12c77c727ad8fb90ef1d30267.jpg (Caused by SSLError(SSLCertVerificationError(1, \"[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: Hostname mismatch, certificate is not valid for 'devvyn.aafc-srdc.herbarium.s3.us-east-1.amazonaws.com'. (_ssl.c:1016)\")))\n  \u274c Failed to download 0032c4e7a00e97fcaafa518ceaea0d91919131e12c77c727ad8fb90ef1d30267.jpg\n  \ud83d\udce5 Downloading 0042a8ea8490719b559ed7ada1b424adfaffd3ef88cc4f99432d63d8c4984ebe.jpg...\nFailed to download https://devvyn.aafc-srdc.herbarium.s3.us-east-1.amazonaws.com/images/00/42/0042a8ea8490719b559ed7ada1b424adfaffd3ef88cc4f99432d63d8c4984ebe.jpg: HTTPSConnectionPool(host='devvyn.aafc-srdc.herbarium.s3.us-east-1.amazonaws.com', port=443): Max retries exceeded with url: /images/00/42/0042a8ea8490719b559ed7ada1b424adfaffd3ef88cc4f99432d63d8c4984ebe.jpg (Caused by SSLError(SSLCertVerificationError(1, \"[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: Hostname mismatch, certificate is not valid for 'devvyn.aafc-srdc.herbarium.s3.us-east-1.amazonaws.com'. (_ssl.c:1016)\")))\n  \u274c Failed to download 0042a8ea8490719b559ed7ada1b424adfaffd3ef88cc4f99432d63d8c4984ebe.jpg\n\ud83d\udcc1 Processing minimal category (target: 25 images)\n\ud83d\udcc1 Processing unlabeled category (target: 20 images)\n\ud83d\udcc1 Processing poor category (target: 10 images)\n\ud83d\udcc1 Processing multilingual category (target: 5 images)\n\n\u2705 Created validation bundle with 0 images\n\ud83d\udcc4 Bundle manifest: stakeholder_demo/sample_images/bundle_manifest.json\n\n\ud83c\udfaf Bundle ready for testing:\n   Path: stakeholder_demo/sample_images\n   Images: 0\n   Categories: ['readable', 'minimal', 'unlabeled', 'poor', 'multilingual']\n",
      "stderr": ""
    },
    "2_processing": {
      "success": false,
      "processing_time": 1.1623952388763428,
      "error": "Command '['python', 'cli.py', 'process', '--input', 'stakeholder_demo/sample_images', '--output', 'stakeholder_demo/processing_results', '--engine', 'vision']' returned non-zero exit status 1.",
      "stderr": "\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /Users/devvynmurphy/Documents/GitHub/aafc-herbarium-dwc-extraction-2025/cli. \u2502\n\u2502 py:529 in process                                                            \u2502\n\u2502                                                                              \u2502\n\u2502   526 \u2502   \u2502   \u2502   help=\"OCR engines to enable (repeatable)\",                 \u2502\n\u2502   527 \u2502   \u2502   ),                                                             \u2502\n\u2502   528 \u2502   ) -> None:                                                         \u2502\n\u2502 \u2771 529 \u2502   \u2502   process_cli(                                                   \u2502\n\u2502   530 \u2502   \u2502   \u2502   input,                                                     \u2502\n\u2502   531 \u2502   \u2502   \u2502   output,                                                    \u2502\n\u2502   532 \u2502   \u2502   \u2502   config,                                                    \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e        \u2502\n\u2502 \u2502         config = None                                             \u2502        \u2502\n\u2502 \u2502 enabled_engine = ['vision']                                       \u2502        \u2502\n\u2502 \u2502          input = PosixPath('stakeholder_demo/sample_images')      \u2502        \u2502\n\u2502 \u2502         output = PosixPath('stakeholder_demo/processing_results') \u2502        \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f        \u2502\n\u2502                                                                              \u2502\n\u2502 /Users/devvynmurphy/Documents/GitHub/aafc-herbarium-dwc-extraction-2025/cli. \u2502\n\u2502 py:442 in process_cli                                                        \u2502\n\u2502                                                                              \u2502\n\u2502   439 \u2502   available. If the commit hash cannot be determined (e.g., not runn \u2502\n\u2502   440 \u2502   inside a git repository), ``git_commit`` will be ``None``.         \u2502\n\u2502   441 \u2502   \"\"\"                                                                \u2502\n\u2502 \u2771 442 \u2502   cfg = setup_run(output, config, enabled_engines)                   \u2502\n\u2502   443 \u2502                                                                      \u2502\n\u2502   444 \u2502   run_id = datetime.now(timezone.utc).isoformat()                    \u2502\n\u2502   445 \u2502   try:                                                               \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e       \u2502\n\u2502 \u2502          config = None                                             \u2502       \u2502\n\u2502 \u2502 enabled_engines = ['vision']                                       \u2502       \u2502\n\u2502 \u2502       input_dir = PosixPath('stakeholder_demo/sample_images')      \u2502       \u2502\n\u2502 \u2502          output = PosixPath('stakeholder_demo/processing_results') \u2502       \u2502\n\u2502 \u2502          resume = False                                            \u2502       \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f       \u2502\n\u2502                                                                              \u2502\n\u2502 /Users/devvynmurphy/Documents/GitHub/aafc-herbarium-dwc-extraction-2025/cli. \u2502\n\u2502 py:111 in setup_run                                                          \u2502\n\u2502                                                                              \u2502\n\u2502   108 ) -> Dict[str, Any]:                                                   \u2502\n\u2502   109 \u2502   \"\"\"Prepare configuration and logging for a run.\"\"\"                 \u2502\n\u2502   110 \u2502   setup_logging(output)                                              \u2502\n\u2502 \u2771 111 \u2502   cfg = load_config(config)                                          \u2502\n\u2502   112 \u2502   dwc_cfg = cfg.get(\"dwc\", {})                                       \u2502\n\u2502   113 \u2502   schema_files = []                                                  \u2502\n\u2502   114 \u2502   for name in dwc_cfg.get(\"schema_files\", []):                       \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e       \u2502\n\u2502 \u2502          config = None                                             \u2502       \u2502\n\u2502 \u2502 enabled_engines = ['vision']                                       \u2502       \u2502\n\u2502 \u2502          output = PosixPath('stakeholder_demo/processing_results') \u2502       \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f       \u2502\n\u2502                                                                              \u2502\n\u2502 /Users/devvynmurphy/Documents/GitHub/aafc-herbarium-dwc-extraction-2025/cli. \u2502\n\u2502 py:89 in load_config                                                         \u2502\n\u2502                                                                              \u2502\n\u2502    86 def load_config(config_path: Optional[Path]) -> Dict[str, Any]:        \u2502\n\u2502    87 \u2502   cfg_path = resources.files(\"config\").joinpath(\"config.default.toml \u2502\n\u2502    88 \u2502   with cfg_path.open(\"rb\") as f:                                     \u2502\n\u2502 \u2771  89 \u2502   \u2502   config = tomli.load(f)                                         \u2502\n\u2502    90 \u2502   if config_path:                                                    \u2502\n\u2502    91 \u2502   \u2502   with config_path.open(\"rb\") as f:                              \u2502\n\u2502    92 \u2502   \u2502   \u2502   user_cfg = tomli.load(f)                                   \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502    cfg_path = PosixPath('/Users/devvynmurphy/Documents/GitHub/aafc-herb\u2026 \u2502 \u2502\n\u2502 \u2502 config_path = None                                                       \u2502 \u2502\n\u2502 \u2502           f = <_io.BufferedReader                                        \u2502 \u2502\n\u2502 \u2502               name='/Users/devvynmurphy/Documents/GitHub/aafc-herbarium\u2026 \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /Users/devvynmurphy/Library/Application                                      \u2502\n\u2502 Support/uv/python/cpython-3.11.13-macos-aarch64-none/lib/python3.11/tomllib/ \u2502\n\u2502 _parser.py:66 in load                                                        \u2502\n\u2502                                                                              \u2502\n\u2502    63 \u2502   \u2502   raise TypeError(                                               \u2502\n\u2502    64 \u2502   \u2502   \u2502   \"File must be opened in binary mode, e.g. use `open('foo.t \u2502\n\u2502    65 \u2502   \u2502   ) from None                                                    \u2502\n\u2502 \u2771  66 \u2502   return loads(s, parse_float=parse_float)                           \u2502\n\u2502    67                                                                        \u2502\n\u2502    68                                                                        \u2502\n\u2502    69 def loads(s: str, /, *, parse_float: ParseFloat = float) -> dict[str,  \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502  b = b'# Engines register themselves via the ``herbarium.engines``       \u2502 \u2502\n\u2502 \u2502      entry-point group.\\n#'+5111                                         \u2502 \u2502\n\u2502 \u2502 fp = <_io.BufferedReader                                                 \u2502 \u2502\n\u2502 \u2502      name='/Users/devvynmurphy/Documents/GitHub/aafc-herbarium-dwc-extr\u2026 \u2502 \u2502\n\u2502 \u2502  s = '# Engines register themselves via the ``herbarium.engines``        \u2502 \u2502\n\u2502 \u2502      entry-point group.\\n#'+5111                                         \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /Users/devvynmurphy/Library/Application                                      \u2502\n\u2502 Support/uv/python/cpython-3.11.13-macos-aarch64-none/lib/python3.11/tomllib/ \u2502\n\u2502 _parser.py:102 in loads                                                      \u2502\n\u2502                                                                              \u2502\n\u2502    99 \u2502   \u2502   \u2502   pos += 1                                                   \u2502\n\u2502   100 \u2502   \u2502   \u2502   continue                                                   \u2502\n\u2502   101 \u2502   \u2502   if char in KEY_INITIAL_CHARS:                                  \u2502\n\u2502 \u2771 102 \u2502   \u2502   \u2502   pos = key_value_rule(src, pos, out, header, parse_float)   \u2502\n\u2502   103 \u2502   \u2502   \u2502   pos = skip_chars(src, pos, TOML_WS)                        \u2502\n\u2502   104 \u2502   \u2502   elif char == \"[\":                                              \u2502\n\u2502   105 \u2502   \u2502   \u2502   try:                                                       \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        char = 'g'                                                        \u2502 \u2502\n\u2502 \u2502      header = ('gemini',)                                                \u2502 \u2502\n\u2502 \u2502         out = Output(                                                    \u2502 \u2502\n\u2502 \u2502               \u2502   data=<tomllib._parser.NestedDict object at             \u2502 \u2502\n\u2502 \u2502               0x1098c2890>,                                              \u2502 \u2502\n\u2502 \u2502               \u2502   flags=<tomllib._parser.Flags object at 0x1098c27d0>    \u2502 \u2502\n\u2502 \u2502               )                                                          \u2502 \u2502\n\u2502 \u2502         pos = 2359                                                       \u2502 \u2502\n\u2502 \u2502           s = '# Engines register themselves via the                     \u2502 \u2502\n\u2502 \u2502               ``herbarium.engines`` entry-point group.\\n#'+5111          \u2502 \u2502\n\u2502 \u2502 second_char = 'g'                                                        \u2502 \u2502\n\u2502 \u2502         src = '# Engines register themselves via the                     \u2502 \u2502\n\u2502 \u2502               ``herbarium.engines`` entry-point group.\\n#'+5111          \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /Users/devvynmurphy/Library/Application                                      \u2502\n\u2502 Support/uv/python/cpython-3.11.13-macos-aarch64-none/lib/python3.11/tomllib/ \u2502\n\u2502 _parser.py:326 in key_value_rule                                             \u2502\n\u2502                                                                              \u2502\n\u2502   323 def key_value_rule(                                                    \u2502\n\u2502   324 \u2502   src: str, pos: Pos, out: Output, header: Key, parse_float: ParseFl \u2502\n\u2502   325 ) -> Pos:                                                              \u2502\n\u2502 \u2771 326 \u2502   pos, key, value = parse_key_value_pair(src, pos, parse_float)      \u2502\n\u2502   327 \u2502   key_parent, key_stem = key[:-1], key[-1]                           \u2502\n\u2502   328 \u2502   abs_key_parent = header + key_parent                               \u2502\n\u2502   329                                                                        \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 header = ('gemini',)                                                     \u2502 \u2502\n\u2502 \u2502    out = Output(                                                         \u2502 \u2502\n\u2502 \u2502          \u2502   data=<tomllib._parser.NestedDict object at 0x1098c2890>,    \u2502 \u2502\n\u2502 \u2502          \u2502   flags=<tomllib._parser.Flags object at 0x1098c27d0>         \u2502 \u2502\n\u2502 \u2502          )                                                               \u2502 \u2502\n\u2502 \u2502    pos = 2359                                                            \u2502 \u2502\n\u2502 \u2502    src = '# Engines register themselves via the ``herbarium.engines``    \u2502 \u2502\n\u2502 \u2502          entry-point group.\\n#'+5111                                     \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /Users/devvynmurphy/Library/Application                                      \u2502\n\u2502 Support/uv/python/cpython-3.11.13-macos-aarch64-none/lib/python3.11/tomllib/ \u2502\n\u2502 _parser.py:369 in parse_key_value_pair                                       \u2502\n\u2502                                                                              \u2502\n\u2502   366 \u2502   \u2502   raise suffixed_err(src, pos, \"Expected '=' after a key in a ke \u2502\n\u2502   367 \u2502   pos += 1                                                           \u2502\n\u2502   368 \u2502   pos = skip_chars(src, pos, TOML_WS)                                \u2502\n\u2502 \u2771 369 \u2502   pos, value = parse_value(src, pos, parse_float)                    \u2502\n\u2502   370 \u2502   return pos, key, value                                             \u2502\n\u2502   371                                                                        \u2502\n\u2502   372                                                                        \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 char = '='                                                               \u2502 \u2502\n\u2502 \u2502  key = ('generation_config',)                                            \u2502 \u2502\n\u2502 \u2502  pos = 2379                                                              \u2502 \u2502\n\u2502 \u2502  src = '# Engines register themselves via the ``herbarium.engines``      \u2502 \u2502\n\u2502 \u2502        entry-point group.\\n#'+5111                                       \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /Users/devvynmurphy/Library/Application                                      \u2502\n\u2502 Support/uv/python/cpython-3.11.13-macos-aarch64-none/lib/python3.11/tomllib/ \u2502\n\u2502 _parser.py:620 in parse_value                                                \u2502\n\u2502                                                                              \u2502\n\u2502   617 \u2502                                                                      \u2502\n\u2502   618 \u2502   # Inline tables                                                    \u2502\n\u2502   619 \u2502   if char == \"{\":                                                    \u2502\n\u2502 \u2771 620 \u2502   \u2502   return parse_inline_table(src, pos, parse_float)               \u2502\n\u2502   621 \u2502                                                                      \u2502\n\u2502   622 \u2502   # Dates and times                                                  \u2502\n\u2502   623 \u2502   datetime_match = RE_DATETIME.match(src, pos)                       \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 char = '{'                                                               \u2502 \u2502\n\u2502 \u2502  pos = 2379                                                              \u2502 \u2502\n\u2502 \u2502  src = '# Engines register themselves via the ``herbarium.engines``      \u2502 \u2502\n\u2502 \u2502        entry-point group.\\n#'+5111                                       \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /Users/devvynmurphy/Library/Application                                      \u2502\n\u2502 Support/uv/python/cpython-3.11.13-macos-aarch64-none/lib/python3.11/tomllib/ \u2502\n\u2502 _parser.py:445 in parse_inline_table                                         \u2502\n\u2502                                                                              \u2502\n\u2502   442 \u2502   if src.startswith(\"}\", pos):                                       \u2502\n\u2502   443 \u2502   \u2502   return pos + 1, nested_dict.dict                               \u2502\n\u2502   444 \u2502   while True:                                                        \u2502\n\u2502 \u2771 445 \u2502   \u2502   pos, key, value = parse_key_value_pair(src, pos, parse_float)  \u2502\n\u2502   446 \u2502   \u2502   key_parent, key_stem = key[:-1], key[-1]                       \u2502\n\u2502   447 \u2502   \u2502   if flags.is_(key, Flags.FROZEN):                               \u2502\n\u2502   448 \u2502   \u2502   \u2502   raise suffixed_err(src, pos, f\"Cannot mutate immutable nam \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502       flags = <tomllib._parser.Flags object at 0x1098c3d90>              \u2502 \u2502\n\u2502 \u2502 nested_dict = <tomllib._parser.NestedDict object at 0x1098c3d10>         \u2502 \u2502\n\u2502 \u2502         pos = 2380                                                       \u2502 \u2502\n\u2502 \u2502         src = '# Engines register themselves via the                     \u2502 \u2502\n\u2502 \u2502               ``herbarium.engines`` entry-point group.\\n#'+5111          \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /Users/devvynmurphy/Library/Application                                      \u2502\n\u2502 Support/uv/python/cpython-3.11.13-macos-aarch64-none/lib/python3.11/tomllib/ \u2502\n\u2502 _parser.py:360 in parse_key_value_pair                                       \u2502\n\u2502                                                                              \u2502\n\u2502   357 def parse_key_value_pair(                                              \u2502\n\u2502   358 \u2502   src: str, pos: Pos, parse_float: ParseFloat                        \u2502\n\u2502   359 ) -> tuple[Pos, Key, Any]:                                             \u2502\n\u2502 \u2771 360 \u2502   pos, key = parse_key(src, pos)                                     \u2502\n\u2502   361 \u2502   try:                                                               \u2502\n\u2502   362 \u2502   \u2502   char: str | None = src[pos]                                    \u2502\n\u2502   363 \u2502   except IndexError:                                                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 pos = 2380                                                               \u2502 \u2502\n\u2502 \u2502 src = '# Engines register themselves via the ``herbarium.engines``       \u2502 \u2502\n\u2502 \u2502       entry-point group.\\n#'+5111                                        \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /Users/devvynmurphy/Library/Application                                      \u2502\n\u2502 Support/uv/python/cpython-3.11.13-macos-aarch64-none/lib/python3.11/tomllib/ \u2502\n\u2502 _parser.py:374 in parse_key                                                  \u2502\n\u2502                                                                              \u2502\n\u2502   371                                                                        \u2502\n\u2502   372                                                                        \u2502\n\u2502   373 def parse_key(src: str, pos: Pos) -> tuple[Pos, Key]:                  \u2502\n\u2502 \u2771 374 \u2502   pos, key_part = parse_key_part(src, pos)                           \u2502\n\u2502   375 \u2502   key: Key = (key_part,)                                             \u2502\n\u2502   376 \u2502   pos = skip_chars(src, pos, TOML_WS)                                \u2502\n\u2502   377 \u2502   while True:                                                        \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 pos = 2380                                                               \u2502 \u2502\n\u2502 \u2502 src = '# Engines register themselves via the ``herbarium.engines``       \u2502 \u2502\n\u2502 \u2502       entry-point group.\\n#'+5111                                        \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /Users/devvynmurphy/Library/Application                                      \u2502\n\u2502 Support/uv/python/cpython-3.11.13-macos-aarch64-none/lib/python3.11/tomllib/ \u2502\n\u2502 _parser.py:404 in parse_key_part                                             \u2502\n\u2502                                                                              \u2502\n\u2502   401 \u2502   \u2502   return parse_literal_str(src, pos)                             \u2502\n\u2502   402 \u2502   if char == '\"':                                                    \u2502\n\u2502   403 \u2502   \u2502   return parse_one_line_basic_str(src, pos)                      \u2502\n\u2502 \u2771 404 \u2502   raise suffixed_err(src, pos, \"Invalid initial character for a key  \u2502\n\u2502   405                                                                        \u2502\n\u2502   406                                                                        \u2502\n\u2502   407 def parse_one_line_basic_str(src: str, pos: Pos) -> tuple[Pos, str]:   \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 char = '\\n'                                                              \u2502 \u2502\n\u2502 \u2502  pos = 2380                                                              \u2502 \u2502\n\u2502 \u2502  src = '# Engines register themselves via the ``herbarium.engines``      \u2502 \u2502\n\u2502 \u2502        entry-point group.\\n#'+5111                                       \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nTOMLDecodeError: Invalid initial character for a key part (at line 75, column \n22)\n"
    }
  },
  "summary": {
    "processing_metrics": {
      "total_processing_time": 2.61,
      "steps_completed": 1,
      "steps_failed": 1
    },
    "quality_metrics": {},
    "output_files": {
      "occurrence.csv": {
        "exists": false
      },
      "identification_history.csv": {
        "exists": false
      },
      "raw.jsonl": {
        "exists": false
      },
      "app.db": {
        "exists": false
      },
      "candidates.db": {
        "exists": false
      }
    },
    "recommendations": [
      "\u2705 Processing speed suitable for production batches"
    ]
  }
}
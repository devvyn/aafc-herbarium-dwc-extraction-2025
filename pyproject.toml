[project]
name = "herbarium-dwc"
version = "2.0.0"
description = "Herbarium OCR to Darwin Core extraction toolkit"
authors = [{name = "AAFC"}]
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "typer",
    "pydantic",
    "pillow",
    "numpy",
    "sqlalchemy",
    "python-dotenv",
    "textual",
    "pyexcel",
    "pyexcel-xlsx",
    "pygsheets",
    "boto3>=1.40.39",
    "requests>=2.32.5",
    # Apple Vision (macOS native) - no dependencies
    # Cloud APIs for comprehensive provider coverage
    "anthropic>=0.68.0", # Claude Vision API
    "openai>=1.109.1", # GPT-4 Vision + GPT-4o API
    "google-cloud-vision>=3.10.2", # Google Vision API
    "google-generativeai>=0.8.0", # Google Gemini Vision API
    "azure-cognitiveservices-vision-computervision>=0.9.0", # Microsoft Azure Vision
    # AWS Textract uses existing boto3 dependency
    "toml>=0.10.2",
    "fastapi>=0.117.1",
    "uvicorn>=0.37.0",
    "jinja2>=3.1.6",
    "rich>=13.0.0",
    "rich-pixels>=3.0.1",
    "quart>=0.19.0",
    "hypercorn>=0.16.0",
    "aiohttp>=3.9.0",
]

[project.scripts]
herbarium-dwc = "cli:app"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = [
    "config",
    "dwc",
    "engines",
    "io_utils",
    "qc",
    "preprocess",
]
py-modules = ["cli"]

[tool.hatch.build.targets.wheel.package-data]
config = [
    "config.default.toml",
    "rules/*.toml",
    "prompts/*.prompt",
    "schemas/*.xsd",
]

[dependency-groups]
dev = [
    "mkdocs-git-revision-date-localized-plugin>=1.4.7",
    "mkdocs-material>=9.6.21",
    "mkdocs-htmlproofer-plugin>=1.3.0",
    "pre-commit>=4.3.0",
    "pytest>=8.4.1",
    "pytest-cov>=6.0.0",
    "pyyaml>=6.0.3",
    "ruff>=0.6.7",
]

[tool.pytest.ini_options]
pythonpath = ["."]

[tool.coverage.run]
source = ["src", "io_utils"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
precision = 2
show_missing = true

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = ["E", "F"]
ignore = ["E501"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.ty]
# Astral's ty type checker - https://docs.astral.sh/ty/
# Adopted October 2025 to complete Astral toolchain (uv + ruff + ty)
# Currently in phased rollout:
#   Phase 1: CI checking core modules (warnings allowed)
#   Phase 2: Fix remaining type issues systematically
#   Phase 3: Enforce strict checking (continue-on-error: false)
#
# Current status: 8 errors in core modules (down from 34 initial)
# Main issues: optional dependency imports, protocol signatures
# Run locally: uvx ty check src/ cli.py io_utils/ dwc/ preprocess/ qc/
